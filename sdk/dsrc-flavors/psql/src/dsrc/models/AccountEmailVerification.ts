
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AccountEmailVerification` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model AccountEmailVerification
 * Email verification entity
 */
export type AccountEmailVerificationModel = runtime.Types.Result.DefaultSelection<Prisma.$AccountEmailVerificationPayload>

export type AggregateAccountEmailVerification = {
  _count: AccountEmailVerificationCountAggregateOutputType | null
  _min: AccountEmailVerificationMinAggregateOutputType | null
  _max: AccountEmailVerificationMaxAggregateOutputType | null
}

export type AccountEmailVerificationMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
}

export type AccountEmailVerificationMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
}

export type AccountEmailVerificationCountAggregateOutputType = {
  id: number
  createdAt: number
  _all: number
}


export type AccountEmailVerificationMinAggregateInputType = {
  id?: true
  createdAt?: true
}

export type AccountEmailVerificationMaxAggregateInputType = {
  id?: true
  createdAt?: true
}

export type AccountEmailVerificationCountAggregateInputType = {
  id?: true
  createdAt?: true
  _all?: true
}

export type AccountEmailVerificationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AccountEmailVerification to aggregate.
   */
  where?: Prisma.AccountEmailVerificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountEmailVerifications to fetch.
   */
  orderBy?: Prisma.AccountEmailVerificationOrderByWithRelationInput | Prisma.AccountEmailVerificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AccountEmailVerificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountEmailVerifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountEmailVerifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AccountEmailVerifications
  **/
  _count?: true | AccountEmailVerificationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AccountEmailVerificationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AccountEmailVerificationMaxAggregateInputType
}

export type GetAccountEmailVerificationAggregateType<T extends AccountEmailVerificationAggregateArgs> = {
      [P in keyof T & keyof AggregateAccountEmailVerification]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAccountEmailVerification[P]>
    : Prisma.GetScalarType<T[P], AggregateAccountEmailVerification[P]>
}




export type AccountEmailVerificationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AccountEmailVerificationWhereInput
  orderBy?: Prisma.AccountEmailVerificationOrderByWithAggregationInput | Prisma.AccountEmailVerificationOrderByWithAggregationInput[]
  by: Prisma.AccountEmailVerificationScalarFieldEnum[] | Prisma.AccountEmailVerificationScalarFieldEnum
  having?: Prisma.AccountEmailVerificationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AccountEmailVerificationCountAggregateInputType | true
  _min?: AccountEmailVerificationMinAggregateInputType
  _max?: AccountEmailVerificationMaxAggregateInputType
}

export type AccountEmailVerificationGroupByOutputType = {
  id: string
  createdAt: Date
  _count: AccountEmailVerificationCountAggregateOutputType | null
  _min: AccountEmailVerificationMinAggregateOutputType | null
  _max: AccountEmailVerificationMaxAggregateOutputType | null
}

type GetAccountEmailVerificationGroupByPayload<T extends AccountEmailVerificationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AccountEmailVerificationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AccountEmailVerificationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AccountEmailVerificationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AccountEmailVerificationGroupByOutputType[P]>
      }
    >
  >



export type AccountEmailVerificationWhereInput = {
  AND?: Prisma.AccountEmailVerificationWhereInput | Prisma.AccountEmailVerificationWhereInput[]
  OR?: Prisma.AccountEmailVerificationWhereInput[]
  NOT?: Prisma.AccountEmailVerificationWhereInput | Prisma.AccountEmailVerificationWhereInput[]
  id?: Prisma.UuidFilter<"AccountEmailVerification"> | string
  createdAt?: Prisma.DateTimeFilter<"AccountEmailVerification"> | Date | string
  email?: Prisma.XOR<Prisma.AccountEmailNullableScalarRelationFilter, Prisma.AccountEmailWhereInput> | null
}

export type AccountEmailVerificationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  email?: Prisma.AccountEmailOrderByWithRelationInput
}

export type AccountEmailVerificationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AccountEmailVerificationWhereInput | Prisma.AccountEmailVerificationWhereInput[]
  OR?: Prisma.AccountEmailVerificationWhereInput[]
  NOT?: Prisma.AccountEmailVerificationWhereInput | Prisma.AccountEmailVerificationWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"AccountEmailVerification"> | Date | string
  email?: Prisma.XOR<Prisma.AccountEmailNullableScalarRelationFilter, Prisma.AccountEmailWhereInput> | null
}, "id">

export type AccountEmailVerificationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.AccountEmailVerificationCountOrderByAggregateInput
  _max?: Prisma.AccountEmailVerificationMaxOrderByAggregateInput
  _min?: Prisma.AccountEmailVerificationMinOrderByAggregateInput
}

export type AccountEmailVerificationScalarWhereWithAggregatesInput = {
  AND?: Prisma.AccountEmailVerificationScalarWhereWithAggregatesInput | Prisma.AccountEmailVerificationScalarWhereWithAggregatesInput[]
  OR?: Prisma.AccountEmailVerificationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AccountEmailVerificationScalarWhereWithAggregatesInput | Prisma.AccountEmailVerificationScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"AccountEmailVerification"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AccountEmailVerification"> | Date | string
}

export type AccountEmailVerificationCreateInput = {
  id?: string
  createdAt?: Date | string
  email?: Prisma.AccountEmailCreateNestedOneWithoutVerificationInput
}

export type AccountEmailVerificationUncheckedCreateInput = {
  id?: string
  createdAt?: Date | string
  email?: Prisma.AccountEmailUncheckedCreateNestedOneWithoutVerificationInput
}

export type AccountEmailVerificationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.AccountEmailUpdateOneWithoutVerificationNestedInput
}

export type AccountEmailVerificationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.AccountEmailUncheckedUpdateOneWithoutVerificationNestedInput
}

export type AccountEmailVerificationCreateManyInput = {
  id?: string
  createdAt?: Date | string
}

export type AccountEmailVerificationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccountEmailVerificationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccountEmailVerificationNullableScalarRelationFilter = {
  is?: Prisma.AccountEmailVerificationWhereInput | null
  isNot?: Prisma.AccountEmailVerificationWhereInput | null
}

export type AccountEmailVerificationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AccountEmailVerificationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AccountEmailVerificationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type AccountEmailVerificationCreateNestedOneWithoutEmailInput = {
  create?: Prisma.XOR<Prisma.AccountEmailVerificationCreateWithoutEmailInput, Prisma.AccountEmailVerificationUncheckedCreateWithoutEmailInput>
  connectOrCreate?: Prisma.AccountEmailVerificationCreateOrConnectWithoutEmailInput
  connect?: Prisma.AccountEmailVerificationWhereUniqueInput
}

export type AccountEmailVerificationUpdateOneWithoutEmailNestedInput = {
  create?: Prisma.XOR<Prisma.AccountEmailVerificationCreateWithoutEmailInput, Prisma.AccountEmailVerificationUncheckedCreateWithoutEmailInput>
  connectOrCreate?: Prisma.AccountEmailVerificationCreateOrConnectWithoutEmailInput
  upsert?: Prisma.AccountEmailVerificationUpsertWithoutEmailInput
  disconnect?: Prisma.AccountEmailVerificationWhereInput | boolean
  delete?: Prisma.AccountEmailVerificationWhereInput | boolean
  connect?: Prisma.AccountEmailVerificationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AccountEmailVerificationUpdateToOneWithWhereWithoutEmailInput, Prisma.AccountEmailVerificationUpdateWithoutEmailInput>, Prisma.AccountEmailVerificationUncheckedUpdateWithoutEmailInput>
}

export type AccountEmailVerificationCreateWithoutEmailInput = {
  id?: string
  createdAt?: Date | string
}

export type AccountEmailVerificationUncheckedCreateWithoutEmailInput = {
  id?: string
  createdAt?: Date | string
}

export type AccountEmailVerificationCreateOrConnectWithoutEmailInput = {
  where: Prisma.AccountEmailVerificationWhereUniqueInput
  create: Prisma.XOR<Prisma.AccountEmailVerificationCreateWithoutEmailInput, Prisma.AccountEmailVerificationUncheckedCreateWithoutEmailInput>
}

export type AccountEmailVerificationUpsertWithoutEmailInput = {
  update: Prisma.XOR<Prisma.AccountEmailVerificationUpdateWithoutEmailInput, Prisma.AccountEmailVerificationUncheckedUpdateWithoutEmailInput>
  create: Prisma.XOR<Prisma.AccountEmailVerificationCreateWithoutEmailInput, Prisma.AccountEmailVerificationUncheckedCreateWithoutEmailInput>
  where?: Prisma.AccountEmailVerificationWhereInput
}

export type AccountEmailVerificationUpdateToOneWithWhereWithoutEmailInput = {
  where?: Prisma.AccountEmailVerificationWhereInput
  data: Prisma.XOR<Prisma.AccountEmailVerificationUpdateWithoutEmailInput, Prisma.AccountEmailVerificationUncheckedUpdateWithoutEmailInput>
}

export type AccountEmailVerificationUpdateWithoutEmailInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AccountEmailVerificationUncheckedUpdateWithoutEmailInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type AccountEmailVerificationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  email?: boolean | Prisma.AccountEmailVerification$emailArgs<ExtArgs>
}, ExtArgs["result"]["accountEmailVerification"]>

export type AccountEmailVerificationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["accountEmailVerification"]>

export type AccountEmailVerificationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
}, ExtArgs["result"]["accountEmailVerification"]>

export type AccountEmailVerificationSelectScalar = {
  id?: boolean
  createdAt?: boolean
}

export type AccountEmailVerificationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt", ExtArgs["result"]["accountEmailVerification"]>
export type AccountEmailVerificationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  email?: boolean | Prisma.AccountEmailVerification$emailArgs<ExtArgs>
}
export type AccountEmailVerificationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type AccountEmailVerificationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $AccountEmailVerificationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AccountEmailVerification"
  objects: {
    email: Prisma.$AccountEmailPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    createdAt: Date
  }, ExtArgs["result"]["accountEmailVerification"]>
  composites: {}
}

export type AccountEmailVerificationGetPayload<S extends boolean | null | undefined | AccountEmailVerificationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AccountEmailVerificationPayload, S>

export type AccountEmailVerificationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AccountEmailVerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AccountEmailVerificationCountAggregateInputType | true
  }

export interface AccountEmailVerificationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountEmailVerification'], meta: { name: 'AccountEmailVerification' } }
  /**
   * Find zero or one AccountEmailVerification that matches the filter.
   * @param {AccountEmailVerificationFindUniqueArgs} args - Arguments to find a AccountEmailVerification
   * @example
   * // Get one AccountEmailVerification
   * const accountEmailVerification = await prisma.accountEmailVerification.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AccountEmailVerificationFindUniqueArgs>(args: Prisma.SelectSubset<T, AccountEmailVerificationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AccountEmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailVerificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AccountEmailVerification that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AccountEmailVerificationFindUniqueOrThrowArgs} args - Arguments to find a AccountEmailVerification
   * @example
   * // Get one AccountEmailVerification
   * const accountEmailVerification = await prisma.accountEmailVerification.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AccountEmailVerificationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AccountEmailVerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccountEmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailVerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AccountEmailVerification that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountEmailVerificationFindFirstArgs} args - Arguments to find a AccountEmailVerification
   * @example
   * // Get one AccountEmailVerification
   * const accountEmailVerification = await prisma.accountEmailVerification.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AccountEmailVerificationFindFirstArgs>(args?: Prisma.SelectSubset<T, AccountEmailVerificationFindFirstArgs<ExtArgs>>): Prisma.Prisma__AccountEmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailVerificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AccountEmailVerification that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountEmailVerificationFindFirstOrThrowArgs} args - Arguments to find a AccountEmailVerification
   * @example
   * // Get one AccountEmailVerification
   * const accountEmailVerification = await prisma.accountEmailVerification.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AccountEmailVerificationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AccountEmailVerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccountEmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailVerificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AccountEmailVerifications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountEmailVerificationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AccountEmailVerifications
   * const accountEmailVerifications = await prisma.accountEmailVerification.findMany()
   * 
   * // Get first 10 AccountEmailVerifications
   * const accountEmailVerifications = await prisma.accountEmailVerification.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const accountEmailVerificationWithIdOnly = await prisma.accountEmailVerification.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AccountEmailVerificationFindManyArgs>(args?: Prisma.SelectSubset<T, AccountEmailVerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountEmailVerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AccountEmailVerification.
   * @param {AccountEmailVerificationCreateArgs} args - Arguments to create a AccountEmailVerification.
   * @example
   * // Create one AccountEmailVerification
   * const AccountEmailVerification = await prisma.accountEmailVerification.create({
   *   data: {
   *     // ... data to create a AccountEmailVerification
   *   }
   * })
   * 
   */
  create<T extends AccountEmailVerificationCreateArgs>(args: Prisma.SelectSubset<T, AccountEmailVerificationCreateArgs<ExtArgs>>): Prisma.Prisma__AccountEmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailVerificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AccountEmailVerifications.
   * @param {AccountEmailVerificationCreateManyArgs} args - Arguments to create many AccountEmailVerifications.
   * @example
   * // Create many AccountEmailVerifications
   * const accountEmailVerification = await prisma.accountEmailVerification.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AccountEmailVerificationCreateManyArgs>(args?: Prisma.SelectSubset<T, AccountEmailVerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AccountEmailVerifications and returns the data saved in the database.
   * @param {AccountEmailVerificationCreateManyAndReturnArgs} args - Arguments to create many AccountEmailVerifications.
   * @example
   * // Create many AccountEmailVerifications
   * const accountEmailVerification = await prisma.accountEmailVerification.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AccountEmailVerifications and only return the `id`
   * const accountEmailVerificationWithIdOnly = await prisma.accountEmailVerification.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AccountEmailVerificationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AccountEmailVerificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountEmailVerificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AccountEmailVerification.
   * @param {AccountEmailVerificationDeleteArgs} args - Arguments to delete one AccountEmailVerification.
   * @example
   * // Delete one AccountEmailVerification
   * const AccountEmailVerification = await prisma.accountEmailVerification.delete({
   *   where: {
   *     // ... filter to delete one AccountEmailVerification
   *   }
   * })
   * 
   */
  delete<T extends AccountEmailVerificationDeleteArgs>(args: Prisma.SelectSubset<T, AccountEmailVerificationDeleteArgs<ExtArgs>>): Prisma.Prisma__AccountEmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailVerificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AccountEmailVerification.
   * @param {AccountEmailVerificationUpdateArgs} args - Arguments to update one AccountEmailVerification.
   * @example
   * // Update one AccountEmailVerification
   * const accountEmailVerification = await prisma.accountEmailVerification.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AccountEmailVerificationUpdateArgs>(args: Prisma.SelectSubset<T, AccountEmailVerificationUpdateArgs<ExtArgs>>): Prisma.Prisma__AccountEmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailVerificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AccountEmailVerifications.
   * @param {AccountEmailVerificationDeleteManyArgs} args - Arguments to filter AccountEmailVerifications to delete.
   * @example
   * // Delete a few AccountEmailVerifications
   * const { count } = await prisma.accountEmailVerification.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AccountEmailVerificationDeleteManyArgs>(args?: Prisma.SelectSubset<T, AccountEmailVerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AccountEmailVerifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountEmailVerificationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AccountEmailVerifications
   * const accountEmailVerification = await prisma.accountEmailVerification.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AccountEmailVerificationUpdateManyArgs>(args: Prisma.SelectSubset<T, AccountEmailVerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AccountEmailVerifications and returns the data updated in the database.
   * @param {AccountEmailVerificationUpdateManyAndReturnArgs} args - Arguments to update many AccountEmailVerifications.
   * @example
   * // Update many AccountEmailVerifications
   * const accountEmailVerification = await prisma.accountEmailVerification.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AccountEmailVerifications and only return the `id`
   * const accountEmailVerificationWithIdOnly = await prisma.accountEmailVerification.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AccountEmailVerificationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AccountEmailVerificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountEmailVerificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AccountEmailVerification.
   * @param {AccountEmailVerificationUpsertArgs} args - Arguments to update or create a AccountEmailVerification.
   * @example
   * // Update or create a AccountEmailVerification
   * const accountEmailVerification = await prisma.accountEmailVerification.upsert({
   *   create: {
   *     // ... data to create a AccountEmailVerification
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AccountEmailVerification we want to update
   *   }
   * })
   */
  upsert<T extends AccountEmailVerificationUpsertArgs>(args: Prisma.SelectSubset<T, AccountEmailVerificationUpsertArgs<ExtArgs>>): Prisma.Prisma__AccountEmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailVerificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AccountEmailVerifications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountEmailVerificationCountArgs} args - Arguments to filter AccountEmailVerifications to count.
   * @example
   * // Count the number of AccountEmailVerifications
   * const count = await prisma.accountEmailVerification.count({
   *   where: {
   *     // ... the filter for the AccountEmailVerifications we want to count
   *   }
   * })
  **/
  count<T extends AccountEmailVerificationCountArgs>(
    args?: Prisma.Subset<T, AccountEmailVerificationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AccountEmailVerificationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AccountEmailVerification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountEmailVerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AccountEmailVerificationAggregateArgs>(args: Prisma.Subset<T, AccountEmailVerificationAggregateArgs>): Prisma.PrismaPromise<GetAccountEmailVerificationAggregateType<T>>

  /**
   * Group by AccountEmailVerification.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountEmailVerificationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AccountEmailVerificationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AccountEmailVerificationGroupByArgs['orderBy'] }
      : { orderBy?: AccountEmailVerificationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AccountEmailVerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountEmailVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AccountEmailVerification model
 */
readonly fields: AccountEmailVerificationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AccountEmailVerification.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AccountEmailVerificationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  email<T extends Prisma.AccountEmailVerification$emailArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AccountEmailVerification$emailArgs<ExtArgs>>): Prisma.Prisma__AccountEmailClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AccountEmailVerification model
 */
export interface AccountEmailVerificationFieldRefs {
  readonly id: Prisma.FieldRef<"AccountEmailVerification", 'String'>
  readonly createdAt: Prisma.FieldRef<"AccountEmailVerification", 'DateTime'>
}
    

// Custom InputTypes
/**
 * AccountEmailVerification findUnique
 */
export type AccountEmailVerificationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmailVerification
   */
  select?: Prisma.AccountEmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmailVerification
   */
  omit?: Prisma.AccountEmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailVerificationInclude<ExtArgs> | null
  /**
   * Filter, which AccountEmailVerification to fetch.
   */
  where: Prisma.AccountEmailVerificationWhereUniqueInput
}

/**
 * AccountEmailVerification findUniqueOrThrow
 */
export type AccountEmailVerificationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmailVerification
   */
  select?: Prisma.AccountEmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmailVerification
   */
  omit?: Prisma.AccountEmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailVerificationInclude<ExtArgs> | null
  /**
   * Filter, which AccountEmailVerification to fetch.
   */
  where: Prisma.AccountEmailVerificationWhereUniqueInput
}

/**
 * AccountEmailVerification findFirst
 */
export type AccountEmailVerificationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmailVerification
   */
  select?: Prisma.AccountEmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmailVerification
   */
  omit?: Prisma.AccountEmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailVerificationInclude<ExtArgs> | null
  /**
   * Filter, which AccountEmailVerification to fetch.
   */
  where?: Prisma.AccountEmailVerificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountEmailVerifications to fetch.
   */
  orderBy?: Prisma.AccountEmailVerificationOrderByWithRelationInput | Prisma.AccountEmailVerificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AccountEmailVerifications.
   */
  cursor?: Prisma.AccountEmailVerificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountEmailVerifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountEmailVerifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AccountEmailVerifications.
   */
  distinct?: Prisma.AccountEmailVerificationScalarFieldEnum | Prisma.AccountEmailVerificationScalarFieldEnum[]
}

/**
 * AccountEmailVerification findFirstOrThrow
 */
export type AccountEmailVerificationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmailVerification
   */
  select?: Prisma.AccountEmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmailVerification
   */
  omit?: Prisma.AccountEmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailVerificationInclude<ExtArgs> | null
  /**
   * Filter, which AccountEmailVerification to fetch.
   */
  where?: Prisma.AccountEmailVerificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountEmailVerifications to fetch.
   */
  orderBy?: Prisma.AccountEmailVerificationOrderByWithRelationInput | Prisma.AccountEmailVerificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AccountEmailVerifications.
   */
  cursor?: Prisma.AccountEmailVerificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountEmailVerifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountEmailVerifications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AccountEmailVerifications.
   */
  distinct?: Prisma.AccountEmailVerificationScalarFieldEnum | Prisma.AccountEmailVerificationScalarFieldEnum[]
}

/**
 * AccountEmailVerification findMany
 */
export type AccountEmailVerificationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmailVerification
   */
  select?: Prisma.AccountEmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmailVerification
   */
  omit?: Prisma.AccountEmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailVerificationInclude<ExtArgs> | null
  /**
   * Filter, which AccountEmailVerifications to fetch.
   */
  where?: Prisma.AccountEmailVerificationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountEmailVerifications to fetch.
   */
  orderBy?: Prisma.AccountEmailVerificationOrderByWithRelationInput | Prisma.AccountEmailVerificationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AccountEmailVerifications.
   */
  cursor?: Prisma.AccountEmailVerificationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountEmailVerifications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountEmailVerifications.
   */
  skip?: number
  distinct?: Prisma.AccountEmailVerificationScalarFieldEnum | Prisma.AccountEmailVerificationScalarFieldEnum[]
}

/**
 * AccountEmailVerification create
 */
export type AccountEmailVerificationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmailVerification
   */
  select?: Prisma.AccountEmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmailVerification
   */
  omit?: Prisma.AccountEmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailVerificationInclude<ExtArgs> | null
  /**
   * The data needed to create a AccountEmailVerification.
   */
  data?: Prisma.XOR<Prisma.AccountEmailVerificationCreateInput, Prisma.AccountEmailVerificationUncheckedCreateInput>
}

/**
 * AccountEmailVerification createMany
 */
export type AccountEmailVerificationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AccountEmailVerifications.
   */
  data: Prisma.AccountEmailVerificationCreateManyInput | Prisma.AccountEmailVerificationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AccountEmailVerification createManyAndReturn
 */
export type AccountEmailVerificationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmailVerification
   */
  select?: Prisma.AccountEmailVerificationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmailVerification
   */
  omit?: Prisma.AccountEmailVerificationOmit<ExtArgs> | null
  /**
   * The data used to create many AccountEmailVerifications.
   */
  data: Prisma.AccountEmailVerificationCreateManyInput | Prisma.AccountEmailVerificationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AccountEmailVerification update
 */
export type AccountEmailVerificationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmailVerification
   */
  select?: Prisma.AccountEmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmailVerification
   */
  omit?: Prisma.AccountEmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailVerificationInclude<ExtArgs> | null
  /**
   * The data needed to update a AccountEmailVerification.
   */
  data: Prisma.XOR<Prisma.AccountEmailVerificationUpdateInput, Prisma.AccountEmailVerificationUncheckedUpdateInput>
  /**
   * Choose, which AccountEmailVerification to update.
   */
  where: Prisma.AccountEmailVerificationWhereUniqueInput
}

/**
 * AccountEmailVerification updateMany
 */
export type AccountEmailVerificationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AccountEmailVerifications.
   */
  data: Prisma.XOR<Prisma.AccountEmailVerificationUpdateManyMutationInput, Prisma.AccountEmailVerificationUncheckedUpdateManyInput>
  /**
   * Filter which AccountEmailVerifications to update
   */
  where?: Prisma.AccountEmailVerificationWhereInput
  /**
   * Limit how many AccountEmailVerifications to update.
   */
  limit?: number
}

/**
 * AccountEmailVerification updateManyAndReturn
 */
export type AccountEmailVerificationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmailVerification
   */
  select?: Prisma.AccountEmailVerificationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmailVerification
   */
  omit?: Prisma.AccountEmailVerificationOmit<ExtArgs> | null
  /**
   * The data used to update AccountEmailVerifications.
   */
  data: Prisma.XOR<Prisma.AccountEmailVerificationUpdateManyMutationInput, Prisma.AccountEmailVerificationUncheckedUpdateManyInput>
  /**
   * Filter which AccountEmailVerifications to update
   */
  where?: Prisma.AccountEmailVerificationWhereInput
  /**
   * Limit how many AccountEmailVerifications to update.
   */
  limit?: number
}

/**
 * AccountEmailVerification upsert
 */
export type AccountEmailVerificationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmailVerification
   */
  select?: Prisma.AccountEmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmailVerification
   */
  omit?: Prisma.AccountEmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailVerificationInclude<ExtArgs> | null
  /**
   * The filter to search for the AccountEmailVerification to update in case it exists.
   */
  where: Prisma.AccountEmailVerificationWhereUniqueInput
  /**
   * In case the AccountEmailVerification found by the `where` argument doesn't exist, create a new AccountEmailVerification with this data.
   */
  create: Prisma.XOR<Prisma.AccountEmailVerificationCreateInput, Prisma.AccountEmailVerificationUncheckedCreateInput>
  /**
   * In case the AccountEmailVerification was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AccountEmailVerificationUpdateInput, Prisma.AccountEmailVerificationUncheckedUpdateInput>
}

/**
 * AccountEmailVerification delete
 */
export type AccountEmailVerificationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmailVerification
   */
  select?: Prisma.AccountEmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmailVerification
   */
  omit?: Prisma.AccountEmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailVerificationInclude<ExtArgs> | null
  /**
   * Filter which AccountEmailVerification to delete.
   */
  where: Prisma.AccountEmailVerificationWhereUniqueInput
}

/**
 * AccountEmailVerification deleteMany
 */
export type AccountEmailVerificationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AccountEmailVerifications to delete
   */
  where?: Prisma.AccountEmailVerificationWhereInput
  /**
   * Limit how many AccountEmailVerifications to delete.
   */
  limit?: number
}

/**
 * AccountEmailVerification.email
 */
export type AccountEmailVerification$emailArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmail
   */
  select?: Prisma.AccountEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmail
   */
  omit?: Prisma.AccountEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailInclude<ExtArgs> | null
  where?: Prisma.AccountEmailWhereInput
}

/**
 * AccountEmailVerification without action
 */
export type AccountEmailVerificationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmailVerification
   */
  select?: Prisma.AccountEmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmailVerification
   */
  omit?: Prisma.AccountEmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailVerificationInclude<ExtArgs> | null
}
