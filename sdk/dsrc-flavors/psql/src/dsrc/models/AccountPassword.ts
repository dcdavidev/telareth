/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AccountPassword` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model AccountPassword
 * Account password
 */
export type AccountPasswordModel = runtime.Types.Result.DefaultSelection<Prisma.$AccountPasswordPayload>

export type AggregateAccountPassword = {
  _count: AccountPasswordCountAggregateOutputType | null
  _min: AccountPasswordMinAggregateOutputType | null
  _max: AccountPasswordMaxAggregateOutputType | null
}

export type AccountPasswordMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  password: string | null
}

export type AccountPasswordMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  password: string | null
}

export type AccountPasswordCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  password: number
  _all: number
}


export type AccountPasswordMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  password?: true
}

export type AccountPasswordMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  password?: true
}

export type AccountPasswordCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  password?: true
  _all?: true
}

export type AccountPasswordAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AccountPassword to aggregate.
   */
  where?: Prisma.AccountPasswordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountPasswords to fetch.
   */
  orderBy?: Prisma.AccountPasswordOrderByWithRelationInput | Prisma.AccountPasswordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AccountPasswordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountPasswords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountPasswords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AccountPasswords
  **/
  _count?: true | AccountPasswordCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AccountPasswordMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AccountPasswordMaxAggregateInputType
}

export type GetAccountPasswordAggregateType<T extends AccountPasswordAggregateArgs> = {
      [P in keyof T & keyof AggregateAccountPassword]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAccountPassword[P]>
    : Prisma.GetScalarType<T[P], AggregateAccountPassword[P]>
}




export type AccountPasswordGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AccountPasswordWhereInput
  orderBy?: Prisma.AccountPasswordOrderByWithAggregationInput | Prisma.AccountPasswordOrderByWithAggregationInput[]
  by: Prisma.AccountPasswordScalarFieldEnum[] | Prisma.AccountPasswordScalarFieldEnum
  having?: Prisma.AccountPasswordScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AccountPasswordCountAggregateInputType | true
  _min?: AccountPasswordMinAggregateInputType
  _max?: AccountPasswordMaxAggregateInputType
}

export type AccountPasswordGroupByOutputType = {
  id: string
  createdAt: Date
  updatedAt: Date
  password: string
  _count: AccountPasswordCountAggregateOutputType | null
  _min: AccountPasswordMinAggregateOutputType | null
  _max: AccountPasswordMaxAggregateOutputType | null
}

type GetAccountPasswordGroupByPayload<T extends AccountPasswordGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AccountPasswordGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AccountPasswordGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AccountPasswordGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AccountPasswordGroupByOutputType[P]>
      }
    >
  >



export type AccountPasswordWhereInput = {
  AND?: Prisma.AccountPasswordWhereInput | Prisma.AccountPasswordWhereInput[]
  OR?: Prisma.AccountPasswordWhereInput[]
  NOT?: Prisma.AccountPasswordWhereInput | Prisma.AccountPasswordWhereInput[]
  id?: Prisma.UuidFilter<"AccountPassword"> | string
  createdAt?: Prisma.DateTimeFilter<"AccountPassword"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AccountPassword"> | Date | string
  password?: Prisma.StringFilter<"AccountPassword"> | string
  account?: Prisma.XOR<Prisma.AccountNullableScalarRelationFilter, Prisma.AccountWhereInput> | null
}

export type AccountPasswordOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  password?: Prisma.SortOrder
  account?: Prisma.AccountOrderByWithRelationInput
}

export type AccountPasswordWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.AccountPasswordWhereInput | Prisma.AccountPasswordWhereInput[]
  OR?: Prisma.AccountPasswordWhereInput[]
  NOT?: Prisma.AccountPasswordWhereInput | Prisma.AccountPasswordWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"AccountPassword"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AccountPassword"> | Date | string
  password?: Prisma.StringFilter<"AccountPassword"> | string
  account?: Prisma.XOR<Prisma.AccountNullableScalarRelationFilter, Prisma.AccountWhereInput> | null
}, "id">

export type AccountPasswordOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  password?: Prisma.SortOrder
  _count?: Prisma.AccountPasswordCountOrderByAggregateInput
  _max?: Prisma.AccountPasswordMaxOrderByAggregateInput
  _min?: Prisma.AccountPasswordMinOrderByAggregateInput
}

export type AccountPasswordScalarWhereWithAggregatesInput = {
  AND?: Prisma.AccountPasswordScalarWhereWithAggregatesInput | Prisma.AccountPasswordScalarWhereWithAggregatesInput[]
  OR?: Prisma.AccountPasswordScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AccountPasswordScalarWhereWithAggregatesInput | Prisma.AccountPasswordScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"AccountPassword"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AccountPassword"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AccountPassword"> | Date | string
  password?: Prisma.StringWithAggregatesFilter<"AccountPassword"> | string
}

export type AccountPasswordCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  password: string
  account?: Prisma.AccountCreateNestedOneWithoutPasswordInput
}

export type AccountPasswordUncheckedCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  password: string
  account?: Prisma.AccountUncheckedCreateNestedOneWithoutPasswordInput
}

export type AccountPasswordUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  account?: Prisma.AccountUpdateOneWithoutPasswordNestedInput
}

export type AccountPasswordUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
  account?: Prisma.AccountUncheckedUpdateOneWithoutPasswordNestedInput
}

export type AccountPasswordCreateManyInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  password: string
}

export type AccountPasswordUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AccountPasswordUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AccountPasswordScalarRelationFilter = {
  is?: Prisma.AccountPasswordWhereInput
  isNot?: Prisma.AccountPasswordWhereInput
}

export type AccountPasswordCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  password?: Prisma.SortOrder
}

export type AccountPasswordMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  password?: Prisma.SortOrder
}

export type AccountPasswordMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  password?: Prisma.SortOrder
}

export type AccountPasswordCreateNestedOneWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.AccountPasswordCreateWithoutAccountInput, Prisma.AccountPasswordUncheckedCreateWithoutAccountInput>
  connectOrCreate?: Prisma.AccountPasswordCreateOrConnectWithoutAccountInput
  connect?: Prisma.AccountPasswordWhereUniqueInput
}

export type AccountPasswordUpdateOneRequiredWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.AccountPasswordCreateWithoutAccountInput, Prisma.AccountPasswordUncheckedCreateWithoutAccountInput>
  connectOrCreate?: Prisma.AccountPasswordCreateOrConnectWithoutAccountInput
  upsert?: Prisma.AccountPasswordUpsertWithoutAccountInput
  connect?: Prisma.AccountPasswordWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AccountPasswordUpdateToOneWithWhereWithoutAccountInput, Prisma.AccountPasswordUpdateWithoutAccountInput>, Prisma.AccountPasswordUncheckedUpdateWithoutAccountInput>
}

export type AccountPasswordCreateWithoutAccountInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  password: string
}

export type AccountPasswordUncheckedCreateWithoutAccountInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  password: string
}

export type AccountPasswordCreateOrConnectWithoutAccountInput = {
  where: Prisma.AccountPasswordWhereUniqueInput
  create: Prisma.XOR<Prisma.AccountPasswordCreateWithoutAccountInput, Prisma.AccountPasswordUncheckedCreateWithoutAccountInput>
}

export type AccountPasswordUpsertWithoutAccountInput = {
  update: Prisma.XOR<Prisma.AccountPasswordUpdateWithoutAccountInput, Prisma.AccountPasswordUncheckedUpdateWithoutAccountInput>
  create: Prisma.XOR<Prisma.AccountPasswordCreateWithoutAccountInput, Prisma.AccountPasswordUncheckedCreateWithoutAccountInput>
  where?: Prisma.AccountPasswordWhereInput
}

export type AccountPasswordUpdateToOneWithWhereWithoutAccountInput = {
  where?: Prisma.AccountPasswordWhereInput
  data: Prisma.XOR<Prisma.AccountPasswordUpdateWithoutAccountInput, Prisma.AccountPasswordUncheckedUpdateWithoutAccountInput>
}

export type AccountPasswordUpdateWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
}

export type AccountPasswordUncheckedUpdateWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  password?: Prisma.StringFieldUpdateOperationsInput | string
}



export type AccountPasswordSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  password?: boolean
  account?: boolean | Prisma.AccountPassword$accountArgs<ExtArgs>
}, ExtArgs["result"]["accountPassword"]>

export type AccountPasswordSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  password?: boolean
}, ExtArgs["result"]["accountPassword"]>

export type AccountPasswordSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  password?: boolean
}, ExtArgs["result"]["accountPassword"]>

export type AccountPasswordSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  password?: boolean
}

export type AccountPasswordOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "password", ExtArgs["result"]["accountPassword"]>
export type AccountPasswordInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.AccountPassword$accountArgs<ExtArgs>
}
export type AccountPasswordIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type AccountPasswordIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $AccountPasswordPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AccountPassword"
  objects: {
    account: Prisma.$AccountPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    createdAt: Date
    updatedAt: Date
    password: string
  }, ExtArgs["result"]["accountPassword"]>
  composites: {}
}

export type AccountPasswordGetPayload<S extends boolean | null | undefined | AccountPasswordDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AccountPasswordPayload, S>

export type AccountPasswordCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AccountPasswordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AccountPasswordCountAggregateInputType | true
  }

export interface AccountPasswordDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountPassword'], meta: { name: 'AccountPassword' } }
  /**
   * Find zero or one AccountPassword that matches the filter.
   * @param {AccountPasswordFindUniqueArgs} args - Arguments to find a AccountPassword
   * @example
   * // Get one AccountPassword
   * const accountPassword = await prisma.accountPassword.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AccountPasswordFindUniqueArgs>(args: Prisma.SelectSubset<T, AccountPasswordFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AccountPasswordClient<runtime.Types.Result.GetResult<Prisma.$AccountPasswordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AccountPassword that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AccountPasswordFindUniqueOrThrowArgs} args - Arguments to find a AccountPassword
   * @example
   * // Get one AccountPassword
   * const accountPassword = await prisma.accountPassword.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AccountPasswordFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AccountPasswordFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccountPasswordClient<runtime.Types.Result.GetResult<Prisma.$AccountPasswordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AccountPassword that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountPasswordFindFirstArgs} args - Arguments to find a AccountPassword
   * @example
   * // Get one AccountPassword
   * const accountPassword = await prisma.accountPassword.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AccountPasswordFindFirstArgs>(args?: Prisma.SelectSubset<T, AccountPasswordFindFirstArgs<ExtArgs>>): Prisma.Prisma__AccountPasswordClient<runtime.Types.Result.GetResult<Prisma.$AccountPasswordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AccountPassword that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountPasswordFindFirstOrThrowArgs} args - Arguments to find a AccountPassword
   * @example
   * // Get one AccountPassword
   * const accountPassword = await prisma.accountPassword.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AccountPasswordFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AccountPasswordFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccountPasswordClient<runtime.Types.Result.GetResult<Prisma.$AccountPasswordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AccountPasswords that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountPasswordFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AccountPasswords
   * const accountPasswords = await prisma.accountPassword.findMany()
   * 
   * // Get first 10 AccountPasswords
   * const accountPasswords = await prisma.accountPassword.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const accountPasswordWithIdOnly = await prisma.accountPassword.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AccountPasswordFindManyArgs>(args?: Prisma.SelectSubset<T, AccountPasswordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountPasswordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AccountPassword.
   * @param {AccountPasswordCreateArgs} args - Arguments to create a AccountPassword.
   * @example
   * // Create one AccountPassword
   * const AccountPassword = await prisma.accountPassword.create({
   *   data: {
   *     // ... data to create a AccountPassword
   *   }
   * })
   * 
   */
  create<T extends AccountPasswordCreateArgs>(args: Prisma.SelectSubset<T, AccountPasswordCreateArgs<ExtArgs>>): Prisma.Prisma__AccountPasswordClient<runtime.Types.Result.GetResult<Prisma.$AccountPasswordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AccountPasswords.
   * @param {AccountPasswordCreateManyArgs} args - Arguments to create many AccountPasswords.
   * @example
   * // Create many AccountPasswords
   * const accountPassword = await prisma.accountPassword.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AccountPasswordCreateManyArgs>(args?: Prisma.SelectSubset<T, AccountPasswordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AccountPasswords and returns the data saved in the database.
   * @param {AccountPasswordCreateManyAndReturnArgs} args - Arguments to create many AccountPasswords.
   * @example
   * // Create many AccountPasswords
   * const accountPassword = await prisma.accountPassword.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AccountPasswords and only return the `id`
   * const accountPasswordWithIdOnly = await prisma.accountPassword.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AccountPasswordCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AccountPasswordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountPasswordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AccountPassword.
   * @param {AccountPasswordDeleteArgs} args - Arguments to delete one AccountPassword.
   * @example
   * // Delete one AccountPassword
   * const AccountPassword = await prisma.accountPassword.delete({
   *   where: {
   *     // ... filter to delete one AccountPassword
   *   }
   * })
   * 
   */
  delete<T extends AccountPasswordDeleteArgs>(args: Prisma.SelectSubset<T, AccountPasswordDeleteArgs<ExtArgs>>): Prisma.Prisma__AccountPasswordClient<runtime.Types.Result.GetResult<Prisma.$AccountPasswordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AccountPassword.
   * @param {AccountPasswordUpdateArgs} args - Arguments to update one AccountPassword.
   * @example
   * // Update one AccountPassword
   * const accountPassword = await prisma.accountPassword.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AccountPasswordUpdateArgs>(args: Prisma.SelectSubset<T, AccountPasswordUpdateArgs<ExtArgs>>): Prisma.Prisma__AccountPasswordClient<runtime.Types.Result.GetResult<Prisma.$AccountPasswordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AccountPasswords.
   * @param {AccountPasswordDeleteManyArgs} args - Arguments to filter AccountPasswords to delete.
   * @example
   * // Delete a few AccountPasswords
   * const { count } = await prisma.accountPassword.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AccountPasswordDeleteManyArgs>(args?: Prisma.SelectSubset<T, AccountPasswordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AccountPasswords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountPasswordUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AccountPasswords
   * const accountPassword = await prisma.accountPassword.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AccountPasswordUpdateManyArgs>(args: Prisma.SelectSubset<T, AccountPasswordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AccountPasswords and returns the data updated in the database.
   * @param {AccountPasswordUpdateManyAndReturnArgs} args - Arguments to update many AccountPasswords.
   * @example
   * // Update many AccountPasswords
   * const accountPassword = await prisma.accountPassword.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AccountPasswords and only return the `id`
   * const accountPasswordWithIdOnly = await prisma.accountPassword.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AccountPasswordUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AccountPasswordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountPasswordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AccountPassword.
   * @param {AccountPasswordUpsertArgs} args - Arguments to update or create a AccountPassword.
   * @example
   * // Update or create a AccountPassword
   * const accountPassword = await prisma.accountPassword.upsert({
   *   create: {
   *     // ... data to create a AccountPassword
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AccountPassword we want to update
   *   }
   * })
   */
  upsert<T extends AccountPasswordUpsertArgs>(args: Prisma.SelectSubset<T, AccountPasswordUpsertArgs<ExtArgs>>): Prisma.Prisma__AccountPasswordClient<runtime.Types.Result.GetResult<Prisma.$AccountPasswordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AccountPasswords.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountPasswordCountArgs} args - Arguments to filter AccountPasswords to count.
   * @example
   * // Count the number of AccountPasswords
   * const count = await prisma.accountPassword.count({
   *   where: {
   *     // ... the filter for the AccountPasswords we want to count
   *   }
   * })
  **/
  count<T extends AccountPasswordCountArgs>(
    args?: Prisma.Subset<T, AccountPasswordCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AccountPasswordCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AccountPassword.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountPasswordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AccountPasswordAggregateArgs>(args: Prisma.Subset<T, AccountPasswordAggregateArgs>): Prisma.PrismaPromise<GetAccountPasswordAggregateType<T>>

  /**
   * Group by AccountPassword.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountPasswordGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AccountPasswordGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AccountPasswordGroupByArgs['orderBy'] }
      : { orderBy?: AccountPasswordGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AccountPasswordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountPasswordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AccountPassword model
 */
readonly fields: AccountPasswordFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AccountPassword.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AccountPasswordClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  account<T extends Prisma.AccountPassword$accountArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AccountPassword$accountArgs<ExtArgs>>): Prisma.Prisma__AccountClient<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AccountPassword model
 */
export interface AccountPasswordFieldRefs {
  readonly id: Prisma.FieldRef<"AccountPassword", 'String'>
  readonly createdAt: Prisma.FieldRef<"AccountPassword", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AccountPassword", 'DateTime'>
  readonly password: Prisma.FieldRef<"AccountPassword", 'String'>
}
    

// Custom InputTypes
/**
 * AccountPassword findUnique
 */
export type AccountPasswordFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountPassword
   */
  select?: Prisma.AccountPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountPassword
   */
  omit?: Prisma.AccountPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountPasswordInclude<ExtArgs> | null
  /**
   * Filter, which AccountPassword to fetch.
   */
  where: Prisma.AccountPasswordWhereUniqueInput
}

/**
 * AccountPassword findUniqueOrThrow
 */
export type AccountPasswordFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountPassword
   */
  select?: Prisma.AccountPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountPassword
   */
  omit?: Prisma.AccountPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountPasswordInclude<ExtArgs> | null
  /**
   * Filter, which AccountPassword to fetch.
   */
  where: Prisma.AccountPasswordWhereUniqueInput
}

/**
 * AccountPassword findFirst
 */
export type AccountPasswordFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountPassword
   */
  select?: Prisma.AccountPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountPassword
   */
  omit?: Prisma.AccountPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountPasswordInclude<ExtArgs> | null
  /**
   * Filter, which AccountPassword to fetch.
   */
  where?: Prisma.AccountPasswordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountPasswords to fetch.
   */
  orderBy?: Prisma.AccountPasswordOrderByWithRelationInput | Prisma.AccountPasswordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AccountPasswords.
   */
  cursor?: Prisma.AccountPasswordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountPasswords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountPasswords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AccountPasswords.
   */
  distinct?: Prisma.AccountPasswordScalarFieldEnum | Prisma.AccountPasswordScalarFieldEnum[]
}

/**
 * AccountPassword findFirstOrThrow
 */
export type AccountPasswordFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountPassword
   */
  select?: Prisma.AccountPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountPassword
   */
  omit?: Prisma.AccountPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountPasswordInclude<ExtArgs> | null
  /**
   * Filter, which AccountPassword to fetch.
   */
  where?: Prisma.AccountPasswordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountPasswords to fetch.
   */
  orderBy?: Prisma.AccountPasswordOrderByWithRelationInput | Prisma.AccountPasswordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AccountPasswords.
   */
  cursor?: Prisma.AccountPasswordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountPasswords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountPasswords.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AccountPasswords.
   */
  distinct?: Prisma.AccountPasswordScalarFieldEnum | Prisma.AccountPasswordScalarFieldEnum[]
}

/**
 * AccountPassword findMany
 */
export type AccountPasswordFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountPassword
   */
  select?: Prisma.AccountPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountPassword
   */
  omit?: Prisma.AccountPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountPasswordInclude<ExtArgs> | null
  /**
   * Filter, which AccountPasswords to fetch.
   */
  where?: Prisma.AccountPasswordWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountPasswords to fetch.
   */
  orderBy?: Prisma.AccountPasswordOrderByWithRelationInput | Prisma.AccountPasswordOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AccountPasswords.
   */
  cursor?: Prisma.AccountPasswordWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountPasswords from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountPasswords.
   */
  skip?: number
  distinct?: Prisma.AccountPasswordScalarFieldEnum | Prisma.AccountPasswordScalarFieldEnum[]
}

/**
 * AccountPassword create
 */
export type AccountPasswordCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountPassword
   */
  select?: Prisma.AccountPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountPassword
   */
  omit?: Prisma.AccountPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountPasswordInclude<ExtArgs> | null
  /**
   * The data needed to create a AccountPassword.
   */
  data: Prisma.XOR<Prisma.AccountPasswordCreateInput, Prisma.AccountPasswordUncheckedCreateInput>
}

/**
 * AccountPassword createMany
 */
export type AccountPasswordCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AccountPasswords.
   */
  data: Prisma.AccountPasswordCreateManyInput | Prisma.AccountPasswordCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AccountPassword createManyAndReturn
 */
export type AccountPasswordCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountPassword
   */
  select?: Prisma.AccountPasswordSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AccountPassword
   */
  omit?: Prisma.AccountPasswordOmit<ExtArgs> | null
  /**
   * The data used to create many AccountPasswords.
   */
  data: Prisma.AccountPasswordCreateManyInput | Prisma.AccountPasswordCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AccountPassword update
 */
export type AccountPasswordUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountPassword
   */
  select?: Prisma.AccountPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountPassword
   */
  omit?: Prisma.AccountPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountPasswordInclude<ExtArgs> | null
  /**
   * The data needed to update a AccountPassword.
   */
  data: Prisma.XOR<Prisma.AccountPasswordUpdateInput, Prisma.AccountPasswordUncheckedUpdateInput>
  /**
   * Choose, which AccountPassword to update.
   */
  where: Prisma.AccountPasswordWhereUniqueInput
}

/**
 * AccountPassword updateMany
 */
export type AccountPasswordUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AccountPasswords.
   */
  data: Prisma.XOR<Prisma.AccountPasswordUpdateManyMutationInput, Prisma.AccountPasswordUncheckedUpdateManyInput>
  /**
   * Filter which AccountPasswords to update
   */
  where?: Prisma.AccountPasswordWhereInput
  /**
   * Limit how many AccountPasswords to update.
   */
  limit?: number
}

/**
 * AccountPassword updateManyAndReturn
 */
export type AccountPasswordUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountPassword
   */
  select?: Prisma.AccountPasswordSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AccountPassword
   */
  omit?: Prisma.AccountPasswordOmit<ExtArgs> | null
  /**
   * The data used to update AccountPasswords.
   */
  data: Prisma.XOR<Prisma.AccountPasswordUpdateManyMutationInput, Prisma.AccountPasswordUncheckedUpdateManyInput>
  /**
   * Filter which AccountPasswords to update
   */
  where?: Prisma.AccountPasswordWhereInput
  /**
   * Limit how many AccountPasswords to update.
   */
  limit?: number
}

/**
 * AccountPassword upsert
 */
export type AccountPasswordUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountPassword
   */
  select?: Prisma.AccountPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountPassword
   */
  omit?: Prisma.AccountPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountPasswordInclude<ExtArgs> | null
  /**
   * The filter to search for the AccountPassword to update in case it exists.
   */
  where: Prisma.AccountPasswordWhereUniqueInput
  /**
   * In case the AccountPassword found by the `where` argument doesn't exist, create a new AccountPassword with this data.
   */
  create: Prisma.XOR<Prisma.AccountPasswordCreateInput, Prisma.AccountPasswordUncheckedCreateInput>
  /**
   * In case the AccountPassword was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AccountPasswordUpdateInput, Prisma.AccountPasswordUncheckedUpdateInput>
}

/**
 * AccountPassword delete
 */
export type AccountPasswordDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountPassword
   */
  select?: Prisma.AccountPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountPassword
   */
  omit?: Prisma.AccountPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountPasswordInclude<ExtArgs> | null
  /**
   * Filter which AccountPassword to delete.
   */
  where: Prisma.AccountPasswordWhereUniqueInput
}

/**
 * AccountPassword deleteMany
 */
export type AccountPasswordDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AccountPasswords to delete
   */
  where?: Prisma.AccountPasswordWhereInput
  /**
   * Limit how many AccountPasswords to delete.
   */
  limit?: number
}

/**
 * AccountPassword.account
 */
export type AccountPassword$accountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null
  where?: Prisma.AccountWhereInput
}

/**
 * AccountPassword without action
 */
export type AccountPasswordDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountPassword
   */
  select?: Prisma.AccountPasswordSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountPassword
   */
  omit?: Prisma.AccountPasswordOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountPasswordInclude<ExtArgs> | null
}
