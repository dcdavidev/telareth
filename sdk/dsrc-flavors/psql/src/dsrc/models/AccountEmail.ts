/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `AccountEmail` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model AccountEmail
 * Account emails
 */
export type AccountEmailModel = runtime.Types.Result.DefaultSelection<Prisma.$AccountEmailPayload>

export type AggregateAccountEmail = {
  _count: AccountEmailCountAggregateOutputType | null
  _min: AccountEmailMinAggregateOutputType | null
  _max: AccountEmailMaxAggregateOutputType | null
}

export type AccountEmailMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  email: string | null
  isPrimary: boolean | null
  accountId: string | null
  verificationId: string | null
}

export type AccountEmailMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  updatedAt: Date | null
  email: string | null
  isPrimary: boolean | null
  accountId: string | null
  verificationId: string | null
}

export type AccountEmailCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  email: number
  isPrimary: number
  accountId: number
  verificationId: number
  _all: number
}


export type AccountEmailMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  email?: true
  isPrimary?: true
  accountId?: true
  verificationId?: true
}

export type AccountEmailMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  email?: true
  isPrimary?: true
  accountId?: true
  verificationId?: true
}

export type AccountEmailCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  email?: true
  isPrimary?: true
  accountId?: true
  verificationId?: true
  _all?: true
}

export type AccountEmailAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AccountEmail to aggregate.
   */
  where?: Prisma.AccountEmailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountEmails to fetch.
   */
  orderBy?: Prisma.AccountEmailOrderByWithRelationInput | Prisma.AccountEmailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.AccountEmailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountEmails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountEmails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned AccountEmails
  **/
  _count?: true | AccountEmailCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AccountEmailMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AccountEmailMaxAggregateInputType
}

export type GetAccountEmailAggregateType<T extends AccountEmailAggregateArgs> = {
      [P in keyof T & keyof AggregateAccountEmail]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAccountEmail[P]>
    : Prisma.GetScalarType<T[P], AggregateAccountEmail[P]>
}




export type AccountEmailGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.AccountEmailWhereInput
  orderBy?: Prisma.AccountEmailOrderByWithAggregationInput | Prisma.AccountEmailOrderByWithAggregationInput[]
  by: Prisma.AccountEmailScalarFieldEnum[] | Prisma.AccountEmailScalarFieldEnum
  having?: Prisma.AccountEmailScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AccountEmailCountAggregateInputType | true
  _min?: AccountEmailMinAggregateInputType
  _max?: AccountEmailMaxAggregateInputType
}

export type AccountEmailGroupByOutputType = {
  id: string
  createdAt: Date
  updatedAt: Date
  email: string
  isPrimary: boolean
  accountId: string | null
  verificationId: string | null
  _count: AccountEmailCountAggregateOutputType | null
  _min: AccountEmailMinAggregateOutputType | null
  _max: AccountEmailMaxAggregateOutputType | null
}

type GetAccountEmailGroupByPayload<T extends AccountEmailGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AccountEmailGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AccountEmailGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AccountEmailGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AccountEmailGroupByOutputType[P]>
      }
    >
  >



export type AccountEmailWhereInput = {
  AND?: Prisma.AccountEmailWhereInput | Prisma.AccountEmailWhereInput[]
  OR?: Prisma.AccountEmailWhereInput[]
  NOT?: Prisma.AccountEmailWhereInput | Prisma.AccountEmailWhereInput[]
  id?: Prisma.UuidFilter<"AccountEmail"> | string
  createdAt?: Prisma.DateTimeFilter<"AccountEmail"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AccountEmail"> | Date | string
  email?: Prisma.StringFilter<"AccountEmail"> | string
  isPrimary?: Prisma.BoolFilter<"AccountEmail"> | boolean
  accountId?: Prisma.UuidNullableFilter<"AccountEmail"> | string | null
  verificationId?: Prisma.UuidNullableFilter<"AccountEmail"> | string | null
  account?: Prisma.XOR<Prisma.AccountNullableScalarRelationFilter, Prisma.AccountWhereInput> | null
  verification?: Prisma.XOR<Prisma.AccountEmailVerificationNullableScalarRelationFilter, Prisma.AccountEmailVerificationWhereInput> | null
}

export type AccountEmailOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  accountId?: Prisma.SortOrderInput | Prisma.SortOrder
  verificationId?: Prisma.SortOrderInput | Prisma.SortOrder
  account?: Prisma.AccountOrderByWithRelationInput
  verification?: Prisma.AccountEmailVerificationOrderByWithRelationInput
}

export type AccountEmailWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  email?: string
  verificationId?: string
  AND?: Prisma.AccountEmailWhereInput | Prisma.AccountEmailWhereInput[]
  OR?: Prisma.AccountEmailWhereInput[]
  NOT?: Prisma.AccountEmailWhereInput | Prisma.AccountEmailWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"AccountEmail"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AccountEmail"> | Date | string
  isPrimary?: Prisma.BoolFilter<"AccountEmail"> | boolean
  accountId?: Prisma.UuidNullableFilter<"AccountEmail"> | string | null
  account?: Prisma.XOR<Prisma.AccountNullableScalarRelationFilter, Prisma.AccountWhereInput> | null
  verification?: Prisma.XOR<Prisma.AccountEmailVerificationNullableScalarRelationFilter, Prisma.AccountEmailVerificationWhereInput> | null
}, "id" | "email" | "verificationId">

export type AccountEmailOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  accountId?: Prisma.SortOrderInput | Prisma.SortOrder
  verificationId?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.AccountEmailCountOrderByAggregateInput
  _max?: Prisma.AccountEmailMaxOrderByAggregateInput
  _min?: Prisma.AccountEmailMinOrderByAggregateInput
}

export type AccountEmailScalarWhereWithAggregatesInput = {
  AND?: Prisma.AccountEmailScalarWhereWithAggregatesInput | Prisma.AccountEmailScalarWhereWithAggregatesInput[]
  OR?: Prisma.AccountEmailScalarWhereWithAggregatesInput[]
  NOT?: Prisma.AccountEmailScalarWhereWithAggregatesInput | Prisma.AccountEmailScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"AccountEmail"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"AccountEmail"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"AccountEmail"> | Date | string
  email?: Prisma.StringWithAggregatesFilter<"AccountEmail"> | string
  isPrimary?: Prisma.BoolWithAggregatesFilter<"AccountEmail"> | boolean
  accountId?: Prisma.UuidNullableWithAggregatesFilter<"AccountEmail"> | string | null
  verificationId?: Prisma.UuidNullableWithAggregatesFilter<"AccountEmail"> | string | null
}

export type AccountEmailCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  isPrimary?: boolean
  account?: Prisma.AccountCreateNestedOneWithoutEmailsInput
  verification?: Prisma.AccountEmailVerificationCreateNestedOneWithoutEmailInput
}

export type AccountEmailUncheckedCreateInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  isPrimary?: boolean
  accountId?: string | null
  verificationId?: string | null
}

export type AccountEmailUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  account?: Prisma.AccountUpdateOneWithoutEmailsNestedInput
  verification?: Prisma.AccountEmailVerificationUpdateOneWithoutEmailNestedInput
}

export type AccountEmailUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  accountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verificationId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AccountEmailCreateManyInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  isPrimary?: boolean
  accountId?: string | null
  verificationId?: string | null
}

export type AccountEmailUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type AccountEmailUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  accountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verificationId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AccountEmailListRelationFilter = {
  every?: Prisma.AccountEmailWhereInput
  some?: Prisma.AccountEmailWhereInput
  none?: Prisma.AccountEmailWhereInput
}

export type AccountEmailOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type AccountEmailCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  verificationId?: Prisma.SortOrder
}

export type AccountEmailMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  verificationId?: Prisma.SortOrder
}

export type AccountEmailMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  email?: Prisma.SortOrder
  isPrimary?: Prisma.SortOrder
  accountId?: Prisma.SortOrder
  verificationId?: Prisma.SortOrder
}

export type AccountEmailNullableScalarRelationFilter = {
  is?: Prisma.AccountEmailWhereInput | null
  isNot?: Prisma.AccountEmailWhereInput | null
}

export type AccountEmailCreateNestedManyWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.AccountEmailCreateWithoutAccountInput, Prisma.AccountEmailUncheckedCreateWithoutAccountInput> | Prisma.AccountEmailCreateWithoutAccountInput[] | Prisma.AccountEmailUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.AccountEmailCreateOrConnectWithoutAccountInput | Prisma.AccountEmailCreateOrConnectWithoutAccountInput[]
  createMany?: Prisma.AccountEmailCreateManyAccountInputEnvelope
  connect?: Prisma.AccountEmailWhereUniqueInput | Prisma.AccountEmailWhereUniqueInput[]
}

export type AccountEmailUncheckedCreateNestedManyWithoutAccountInput = {
  create?: Prisma.XOR<Prisma.AccountEmailCreateWithoutAccountInput, Prisma.AccountEmailUncheckedCreateWithoutAccountInput> | Prisma.AccountEmailCreateWithoutAccountInput[] | Prisma.AccountEmailUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.AccountEmailCreateOrConnectWithoutAccountInput | Prisma.AccountEmailCreateOrConnectWithoutAccountInput[]
  createMany?: Prisma.AccountEmailCreateManyAccountInputEnvelope
  connect?: Prisma.AccountEmailWhereUniqueInput | Prisma.AccountEmailWhereUniqueInput[]
}

export type AccountEmailUpdateManyWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.AccountEmailCreateWithoutAccountInput, Prisma.AccountEmailUncheckedCreateWithoutAccountInput> | Prisma.AccountEmailCreateWithoutAccountInput[] | Prisma.AccountEmailUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.AccountEmailCreateOrConnectWithoutAccountInput | Prisma.AccountEmailCreateOrConnectWithoutAccountInput[]
  upsert?: Prisma.AccountEmailUpsertWithWhereUniqueWithoutAccountInput | Prisma.AccountEmailUpsertWithWhereUniqueWithoutAccountInput[]
  createMany?: Prisma.AccountEmailCreateManyAccountInputEnvelope
  set?: Prisma.AccountEmailWhereUniqueInput | Prisma.AccountEmailWhereUniqueInput[]
  disconnect?: Prisma.AccountEmailWhereUniqueInput | Prisma.AccountEmailWhereUniqueInput[]
  delete?: Prisma.AccountEmailWhereUniqueInput | Prisma.AccountEmailWhereUniqueInput[]
  connect?: Prisma.AccountEmailWhereUniqueInput | Prisma.AccountEmailWhereUniqueInput[]
  update?: Prisma.AccountEmailUpdateWithWhereUniqueWithoutAccountInput | Prisma.AccountEmailUpdateWithWhereUniqueWithoutAccountInput[]
  updateMany?: Prisma.AccountEmailUpdateManyWithWhereWithoutAccountInput | Prisma.AccountEmailUpdateManyWithWhereWithoutAccountInput[]
  deleteMany?: Prisma.AccountEmailScalarWhereInput | Prisma.AccountEmailScalarWhereInput[]
}

export type AccountEmailUncheckedUpdateManyWithoutAccountNestedInput = {
  create?: Prisma.XOR<Prisma.AccountEmailCreateWithoutAccountInput, Prisma.AccountEmailUncheckedCreateWithoutAccountInput> | Prisma.AccountEmailCreateWithoutAccountInput[] | Prisma.AccountEmailUncheckedCreateWithoutAccountInput[]
  connectOrCreate?: Prisma.AccountEmailCreateOrConnectWithoutAccountInput | Prisma.AccountEmailCreateOrConnectWithoutAccountInput[]
  upsert?: Prisma.AccountEmailUpsertWithWhereUniqueWithoutAccountInput | Prisma.AccountEmailUpsertWithWhereUniqueWithoutAccountInput[]
  createMany?: Prisma.AccountEmailCreateManyAccountInputEnvelope
  set?: Prisma.AccountEmailWhereUniqueInput | Prisma.AccountEmailWhereUniqueInput[]
  disconnect?: Prisma.AccountEmailWhereUniqueInput | Prisma.AccountEmailWhereUniqueInput[]
  delete?: Prisma.AccountEmailWhereUniqueInput | Prisma.AccountEmailWhereUniqueInput[]
  connect?: Prisma.AccountEmailWhereUniqueInput | Prisma.AccountEmailWhereUniqueInput[]
  update?: Prisma.AccountEmailUpdateWithWhereUniqueWithoutAccountInput | Prisma.AccountEmailUpdateWithWhereUniqueWithoutAccountInput[]
  updateMany?: Prisma.AccountEmailUpdateManyWithWhereWithoutAccountInput | Prisma.AccountEmailUpdateManyWithWhereWithoutAccountInput[]
  deleteMany?: Prisma.AccountEmailScalarWhereInput | Prisma.AccountEmailScalarWhereInput[]
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type AccountEmailCreateNestedOneWithoutVerificationInput = {
  create?: Prisma.XOR<Prisma.AccountEmailCreateWithoutVerificationInput, Prisma.AccountEmailUncheckedCreateWithoutVerificationInput>
  connectOrCreate?: Prisma.AccountEmailCreateOrConnectWithoutVerificationInput
  connect?: Prisma.AccountEmailWhereUniqueInput
}

export type AccountEmailUncheckedCreateNestedOneWithoutVerificationInput = {
  create?: Prisma.XOR<Prisma.AccountEmailCreateWithoutVerificationInput, Prisma.AccountEmailUncheckedCreateWithoutVerificationInput>
  connectOrCreate?: Prisma.AccountEmailCreateOrConnectWithoutVerificationInput
  connect?: Prisma.AccountEmailWhereUniqueInput
}

export type AccountEmailUpdateOneWithoutVerificationNestedInput = {
  create?: Prisma.XOR<Prisma.AccountEmailCreateWithoutVerificationInput, Prisma.AccountEmailUncheckedCreateWithoutVerificationInput>
  connectOrCreate?: Prisma.AccountEmailCreateOrConnectWithoutVerificationInput
  upsert?: Prisma.AccountEmailUpsertWithoutVerificationInput
  disconnect?: Prisma.AccountEmailWhereInput | boolean
  delete?: Prisma.AccountEmailWhereInput | boolean
  connect?: Prisma.AccountEmailWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AccountEmailUpdateToOneWithWhereWithoutVerificationInput, Prisma.AccountEmailUpdateWithoutVerificationInput>, Prisma.AccountEmailUncheckedUpdateWithoutVerificationInput>
}

export type AccountEmailUncheckedUpdateOneWithoutVerificationNestedInput = {
  create?: Prisma.XOR<Prisma.AccountEmailCreateWithoutVerificationInput, Prisma.AccountEmailUncheckedCreateWithoutVerificationInput>
  connectOrCreate?: Prisma.AccountEmailCreateOrConnectWithoutVerificationInput
  upsert?: Prisma.AccountEmailUpsertWithoutVerificationInput
  disconnect?: Prisma.AccountEmailWhereInput | boolean
  delete?: Prisma.AccountEmailWhereInput | boolean
  connect?: Prisma.AccountEmailWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.AccountEmailUpdateToOneWithWhereWithoutVerificationInput, Prisma.AccountEmailUpdateWithoutVerificationInput>, Prisma.AccountEmailUncheckedUpdateWithoutVerificationInput>
}

export type AccountEmailCreateWithoutAccountInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  isPrimary?: boolean
  verification?: Prisma.AccountEmailVerificationCreateNestedOneWithoutEmailInput
}

export type AccountEmailUncheckedCreateWithoutAccountInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  isPrimary?: boolean
  verificationId?: string | null
}

export type AccountEmailCreateOrConnectWithoutAccountInput = {
  where: Prisma.AccountEmailWhereUniqueInput
  create: Prisma.XOR<Prisma.AccountEmailCreateWithoutAccountInput, Prisma.AccountEmailUncheckedCreateWithoutAccountInput>
}

export type AccountEmailCreateManyAccountInputEnvelope = {
  data: Prisma.AccountEmailCreateManyAccountInput | Prisma.AccountEmailCreateManyAccountInput[]
  skipDuplicates?: boolean
}

export type AccountEmailUpsertWithWhereUniqueWithoutAccountInput = {
  where: Prisma.AccountEmailWhereUniqueInput
  update: Prisma.XOR<Prisma.AccountEmailUpdateWithoutAccountInput, Prisma.AccountEmailUncheckedUpdateWithoutAccountInput>
  create: Prisma.XOR<Prisma.AccountEmailCreateWithoutAccountInput, Prisma.AccountEmailUncheckedCreateWithoutAccountInput>
}

export type AccountEmailUpdateWithWhereUniqueWithoutAccountInput = {
  where: Prisma.AccountEmailWhereUniqueInput
  data: Prisma.XOR<Prisma.AccountEmailUpdateWithoutAccountInput, Prisma.AccountEmailUncheckedUpdateWithoutAccountInput>
}

export type AccountEmailUpdateManyWithWhereWithoutAccountInput = {
  where: Prisma.AccountEmailScalarWhereInput
  data: Prisma.XOR<Prisma.AccountEmailUpdateManyMutationInput, Prisma.AccountEmailUncheckedUpdateManyWithoutAccountInput>
}

export type AccountEmailScalarWhereInput = {
  AND?: Prisma.AccountEmailScalarWhereInput | Prisma.AccountEmailScalarWhereInput[]
  OR?: Prisma.AccountEmailScalarWhereInput[]
  NOT?: Prisma.AccountEmailScalarWhereInput | Prisma.AccountEmailScalarWhereInput[]
  id?: Prisma.UuidFilter<"AccountEmail"> | string
  createdAt?: Prisma.DateTimeFilter<"AccountEmail"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"AccountEmail"> | Date | string
  email?: Prisma.StringFilter<"AccountEmail"> | string
  isPrimary?: Prisma.BoolFilter<"AccountEmail"> | boolean
  accountId?: Prisma.UuidNullableFilter<"AccountEmail"> | string | null
  verificationId?: Prisma.UuidNullableFilter<"AccountEmail"> | string | null
}

export type AccountEmailCreateWithoutVerificationInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  isPrimary?: boolean
  account?: Prisma.AccountCreateNestedOneWithoutEmailsInput
}

export type AccountEmailUncheckedCreateWithoutVerificationInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  isPrimary?: boolean
  accountId?: string | null
}

export type AccountEmailCreateOrConnectWithoutVerificationInput = {
  where: Prisma.AccountEmailWhereUniqueInput
  create: Prisma.XOR<Prisma.AccountEmailCreateWithoutVerificationInput, Prisma.AccountEmailUncheckedCreateWithoutVerificationInput>
}

export type AccountEmailUpsertWithoutVerificationInput = {
  update: Prisma.XOR<Prisma.AccountEmailUpdateWithoutVerificationInput, Prisma.AccountEmailUncheckedUpdateWithoutVerificationInput>
  create: Prisma.XOR<Prisma.AccountEmailCreateWithoutVerificationInput, Prisma.AccountEmailUncheckedCreateWithoutVerificationInput>
  where?: Prisma.AccountEmailWhereInput
}

export type AccountEmailUpdateToOneWithWhereWithoutVerificationInput = {
  where?: Prisma.AccountEmailWhereInput
  data: Prisma.XOR<Prisma.AccountEmailUpdateWithoutVerificationInput, Prisma.AccountEmailUncheckedUpdateWithoutVerificationInput>
}

export type AccountEmailUpdateWithoutVerificationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  account?: Prisma.AccountUpdateOneWithoutEmailsNestedInput
}

export type AccountEmailUncheckedUpdateWithoutVerificationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  accountId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AccountEmailCreateManyAccountInput = {
  id?: string
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  isPrimary?: boolean
  verificationId?: string | null
}

export type AccountEmailUpdateWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  verification?: Prisma.AccountEmailVerificationUpdateOneWithoutEmailNestedInput
}

export type AccountEmailUncheckedUpdateWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  verificationId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type AccountEmailUncheckedUpdateManyWithoutAccountInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  isPrimary?: Prisma.BoolFieldUpdateOperationsInput | boolean
  verificationId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}



export type AccountEmailSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean
  isPrimary?: boolean
  accountId?: boolean
  verificationId?: boolean
  account?: boolean | Prisma.AccountEmail$accountArgs<ExtArgs>
  verification?: boolean | Prisma.AccountEmail$verificationArgs<ExtArgs>
}, ExtArgs["result"]["accountEmail"]>

export type AccountEmailSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean
  isPrimary?: boolean
  accountId?: boolean
  verificationId?: boolean
  account?: boolean | Prisma.AccountEmail$accountArgs<ExtArgs>
  verification?: boolean | Prisma.AccountEmail$verificationArgs<ExtArgs>
}, ExtArgs["result"]["accountEmail"]>

export type AccountEmailSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean
  isPrimary?: boolean
  accountId?: boolean
  verificationId?: boolean
  account?: boolean | Prisma.AccountEmail$accountArgs<ExtArgs>
  verification?: boolean | Prisma.AccountEmail$verificationArgs<ExtArgs>
}, ExtArgs["result"]["accountEmail"]>

export type AccountEmailSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean
  isPrimary?: boolean
  accountId?: boolean
  verificationId?: boolean
}

export type AccountEmailOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "email" | "isPrimary" | "accountId" | "verificationId", ExtArgs["result"]["accountEmail"]>
export type AccountEmailInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.AccountEmail$accountArgs<ExtArgs>
  verification?: boolean | Prisma.AccountEmail$verificationArgs<ExtArgs>
}
export type AccountEmailIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.AccountEmail$accountArgs<ExtArgs>
  verification?: boolean | Prisma.AccountEmail$verificationArgs<ExtArgs>
}
export type AccountEmailIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  account?: boolean | Prisma.AccountEmail$accountArgs<ExtArgs>
  verification?: boolean | Prisma.AccountEmail$verificationArgs<ExtArgs>
}

export type $AccountEmailPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "AccountEmail"
  objects: {
    account: Prisma.$AccountPayload<ExtArgs> | null
    verification: Prisma.$AccountEmailVerificationPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    createdAt: Date
    updatedAt: Date
    email: string
    /**
     * If true the email is used to login
     */
    isPrimary: boolean
    accountId: string | null
    verificationId: string | null
  }, ExtArgs["result"]["accountEmail"]>
  composites: {}
}

export type AccountEmailGetPayload<S extends boolean | null | undefined | AccountEmailDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$AccountEmailPayload, S>

export type AccountEmailCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<AccountEmailFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AccountEmailCountAggregateInputType | true
  }

export interface AccountEmailDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccountEmail'], meta: { name: 'AccountEmail' } }
  /**
   * Find zero or one AccountEmail that matches the filter.
   * @param {AccountEmailFindUniqueArgs} args - Arguments to find a AccountEmail
   * @example
   * // Get one AccountEmail
   * const accountEmail = await prisma.accountEmail.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends AccountEmailFindUniqueArgs>(args: Prisma.SelectSubset<T, AccountEmailFindUniqueArgs<ExtArgs>>): Prisma.Prisma__AccountEmailClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one AccountEmail that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {AccountEmailFindUniqueOrThrowArgs} args - Arguments to find a AccountEmail
   * @example
   * // Get one AccountEmail
   * const accountEmail = await prisma.accountEmail.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends AccountEmailFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, AccountEmailFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccountEmailClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AccountEmail that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountEmailFindFirstArgs} args - Arguments to find a AccountEmail
   * @example
   * // Get one AccountEmail
   * const accountEmail = await prisma.accountEmail.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends AccountEmailFindFirstArgs>(args?: Prisma.SelectSubset<T, AccountEmailFindFirstArgs<ExtArgs>>): Prisma.Prisma__AccountEmailClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first AccountEmail that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountEmailFindFirstOrThrowArgs} args - Arguments to find a AccountEmail
   * @example
   * // Get one AccountEmail
   * const accountEmail = await prisma.accountEmail.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends AccountEmailFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, AccountEmailFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__AccountEmailClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more AccountEmails that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountEmailFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all AccountEmails
   * const accountEmails = await prisma.accountEmail.findMany()
   * 
   * // Get first 10 AccountEmails
   * const accountEmails = await prisma.accountEmail.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const accountEmailWithIdOnly = await prisma.accountEmail.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends AccountEmailFindManyArgs>(args?: Prisma.SelectSubset<T, AccountEmailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountEmailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a AccountEmail.
   * @param {AccountEmailCreateArgs} args - Arguments to create a AccountEmail.
   * @example
   * // Create one AccountEmail
   * const AccountEmail = await prisma.accountEmail.create({
   *   data: {
   *     // ... data to create a AccountEmail
   *   }
   * })
   * 
   */
  create<T extends AccountEmailCreateArgs>(args: Prisma.SelectSubset<T, AccountEmailCreateArgs<ExtArgs>>): Prisma.Prisma__AccountEmailClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many AccountEmails.
   * @param {AccountEmailCreateManyArgs} args - Arguments to create many AccountEmails.
   * @example
   * // Create many AccountEmails
   * const accountEmail = await prisma.accountEmail.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends AccountEmailCreateManyArgs>(args?: Prisma.SelectSubset<T, AccountEmailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many AccountEmails and returns the data saved in the database.
   * @param {AccountEmailCreateManyAndReturnArgs} args - Arguments to create many AccountEmails.
   * @example
   * // Create many AccountEmails
   * const accountEmail = await prisma.accountEmail.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many AccountEmails and only return the `id`
   * const accountEmailWithIdOnly = await prisma.accountEmail.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends AccountEmailCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, AccountEmailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountEmailPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a AccountEmail.
   * @param {AccountEmailDeleteArgs} args - Arguments to delete one AccountEmail.
   * @example
   * // Delete one AccountEmail
   * const AccountEmail = await prisma.accountEmail.delete({
   *   where: {
   *     // ... filter to delete one AccountEmail
   *   }
   * })
   * 
   */
  delete<T extends AccountEmailDeleteArgs>(args: Prisma.SelectSubset<T, AccountEmailDeleteArgs<ExtArgs>>): Prisma.Prisma__AccountEmailClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one AccountEmail.
   * @param {AccountEmailUpdateArgs} args - Arguments to update one AccountEmail.
   * @example
   * // Update one AccountEmail
   * const accountEmail = await prisma.accountEmail.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends AccountEmailUpdateArgs>(args: Prisma.SelectSubset<T, AccountEmailUpdateArgs<ExtArgs>>): Prisma.Prisma__AccountEmailClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more AccountEmails.
   * @param {AccountEmailDeleteManyArgs} args - Arguments to filter AccountEmails to delete.
   * @example
   * // Delete a few AccountEmails
   * const { count } = await prisma.accountEmail.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends AccountEmailDeleteManyArgs>(args?: Prisma.SelectSubset<T, AccountEmailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AccountEmails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountEmailUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many AccountEmails
   * const accountEmail = await prisma.accountEmail.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends AccountEmailUpdateManyArgs>(args: Prisma.SelectSubset<T, AccountEmailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more AccountEmails and returns the data updated in the database.
   * @param {AccountEmailUpdateManyAndReturnArgs} args - Arguments to update many AccountEmails.
   * @example
   * // Update many AccountEmails
   * const accountEmail = await prisma.accountEmail.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more AccountEmails and only return the `id`
   * const accountEmailWithIdOnly = await prisma.accountEmail.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends AccountEmailUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, AccountEmailUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$AccountEmailPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one AccountEmail.
   * @param {AccountEmailUpsertArgs} args - Arguments to update or create a AccountEmail.
   * @example
   * // Update or create a AccountEmail
   * const accountEmail = await prisma.accountEmail.upsert({
   *   create: {
   *     // ... data to create a AccountEmail
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the AccountEmail we want to update
   *   }
   * })
   */
  upsert<T extends AccountEmailUpsertArgs>(args: Prisma.SelectSubset<T, AccountEmailUpsertArgs<ExtArgs>>): Prisma.Prisma__AccountEmailClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of AccountEmails.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountEmailCountArgs} args - Arguments to filter AccountEmails to count.
   * @example
   * // Count the number of AccountEmails
   * const count = await prisma.accountEmail.count({
   *   where: {
   *     // ... the filter for the AccountEmails we want to count
   *   }
   * })
  **/
  count<T extends AccountEmailCountArgs>(
    args?: Prisma.Subset<T, AccountEmailCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AccountEmailCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a AccountEmail.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountEmailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AccountEmailAggregateArgs>(args: Prisma.Subset<T, AccountEmailAggregateArgs>): Prisma.PrismaPromise<GetAccountEmailAggregateType<T>>

  /**
   * Group by AccountEmail.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AccountEmailGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends AccountEmailGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: AccountEmailGroupByArgs['orderBy'] }
      : { orderBy?: AccountEmailGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, AccountEmailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountEmailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the AccountEmail model
 */
readonly fields: AccountEmailFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for AccountEmail.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__AccountEmailClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  account<T extends Prisma.AccountEmail$accountArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AccountEmail$accountArgs<ExtArgs>>): Prisma.Prisma__AccountClient<runtime.Types.Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  verification<T extends Prisma.AccountEmail$verificationArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.AccountEmail$verificationArgs<ExtArgs>>): Prisma.Prisma__AccountEmailVerificationClient<runtime.Types.Result.GetResult<Prisma.$AccountEmailVerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the AccountEmail model
 */
export interface AccountEmailFieldRefs {
  readonly id: Prisma.FieldRef<"AccountEmail", 'String'>
  readonly createdAt: Prisma.FieldRef<"AccountEmail", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"AccountEmail", 'DateTime'>
  readonly email: Prisma.FieldRef<"AccountEmail", 'String'>
  readonly isPrimary: Prisma.FieldRef<"AccountEmail", 'Boolean'>
  readonly accountId: Prisma.FieldRef<"AccountEmail", 'String'>
  readonly verificationId: Prisma.FieldRef<"AccountEmail", 'String'>
}
    

// Custom InputTypes
/**
 * AccountEmail findUnique
 */
export type AccountEmailFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmail
   */
  select?: Prisma.AccountEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmail
   */
  omit?: Prisma.AccountEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailInclude<ExtArgs> | null
  /**
   * Filter, which AccountEmail to fetch.
   */
  where: Prisma.AccountEmailWhereUniqueInput
}

/**
 * AccountEmail findUniqueOrThrow
 */
export type AccountEmailFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmail
   */
  select?: Prisma.AccountEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmail
   */
  omit?: Prisma.AccountEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailInclude<ExtArgs> | null
  /**
   * Filter, which AccountEmail to fetch.
   */
  where: Prisma.AccountEmailWhereUniqueInput
}

/**
 * AccountEmail findFirst
 */
export type AccountEmailFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmail
   */
  select?: Prisma.AccountEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmail
   */
  omit?: Prisma.AccountEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailInclude<ExtArgs> | null
  /**
   * Filter, which AccountEmail to fetch.
   */
  where?: Prisma.AccountEmailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountEmails to fetch.
   */
  orderBy?: Prisma.AccountEmailOrderByWithRelationInput | Prisma.AccountEmailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AccountEmails.
   */
  cursor?: Prisma.AccountEmailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountEmails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountEmails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AccountEmails.
   */
  distinct?: Prisma.AccountEmailScalarFieldEnum | Prisma.AccountEmailScalarFieldEnum[]
}

/**
 * AccountEmail findFirstOrThrow
 */
export type AccountEmailFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmail
   */
  select?: Prisma.AccountEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmail
   */
  omit?: Prisma.AccountEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailInclude<ExtArgs> | null
  /**
   * Filter, which AccountEmail to fetch.
   */
  where?: Prisma.AccountEmailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountEmails to fetch.
   */
  orderBy?: Prisma.AccountEmailOrderByWithRelationInput | Prisma.AccountEmailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for AccountEmails.
   */
  cursor?: Prisma.AccountEmailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountEmails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountEmails.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of AccountEmails.
   */
  distinct?: Prisma.AccountEmailScalarFieldEnum | Prisma.AccountEmailScalarFieldEnum[]
}

/**
 * AccountEmail findMany
 */
export type AccountEmailFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmail
   */
  select?: Prisma.AccountEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmail
   */
  omit?: Prisma.AccountEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailInclude<ExtArgs> | null
  /**
   * Filter, which AccountEmails to fetch.
   */
  where?: Prisma.AccountEmailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of AccountEmails to fetch.
   */
  orderBy?: Prisma.AccountEmailOrderByWithRelationInput | Prisma.AccountEmailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing AccountEmails.
   */
  cursor?: Prisma.AccountEmailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` AccountEmails from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` AccountEmails.
   */
  skip?: number
  distinct?: Prisma.AccountEmailScalarFieldEnum | Prisma.AccountEmailScalarFieldEnum[]
}

/**
 * AccountEmail create
 */
export type AccountEmailCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmail
   */
  select?: Prisma.AccountEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmail
   */
  omit?: Prisma.AccountEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailInclude<ExtArgs> | null
  /**
   * The data needed to create a AccountEmail.
   */
  data: Prisma.XOR<Prisma.AccountEmailCreateInput, Prisma.AccountEmailUncheckedCreateInput>
}

/**
 * AccountEmail createMany
 */
export type AccountEmailCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many AccountEmails.
   */
  data: Prisma.AccountEmailCreateManyInput | Prisma.AccountEmailCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * AccountEmail createManyAndReturn
 */
export type AccountEmailCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmail
   */
  select?: Prisma.AccountEmailSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmail
   */
  omit?: Prisma.AccountEmailOmit<ExtArgs> | null
  /**
   * The data used to create many AccountEmails.
   */
  data: Prisma.AccountEmailCreateManyInput | Prisma.AccountEmailCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * AccountEmail update
 */
export type AccountEmailUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmail
   */
  select?: Prisma.AccountEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmail
   */
  omit?: Prisma.AccountEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailInclude<ExtArgs> | null
  /**
   * The data needed to update a AccountEmail.
   */
  data: Prisma.XOR<Prisma.AccountEmailUpdateInput, Prisma.AccountEmailUncheckedUpdateInput>
  /**
   * Choose, which AccountEmail to update.
   */
  where: Prisma.AccountEmailWhereUniqueInput
}

/**
 * AccountEmail updateMany
 */
export type AccountEmailUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update AccountEmails.
   */
  data: Prisma.XOR<Prisma.AccountEmailUpdateManyMutationInput, Prisma.AccountEmailUncheckedUpdateManyInput>
  /**
   * Filter which AccountEmails to update
   */
  where?: Prisma.AccountEmailWhereInput
  /**
   * Limit how many AccountEmails to update.
   */
  limit?: number
}

/**
 * AccountEmail updateManyAndReturn
 */
export type AccountEmailUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmail
   */
  select?: Prisma.AccountEmailSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmail
   */
  omit?: Prisma.AccountEmailOmit<ExtArgs> | null
  /**
   * The data used to update AccountEmails.
   */
  data: Prisma.XOR<Prisma.AccountEmailUpdateManyMutationInput, Prisma.AccountEmailUncheckedUpdateManyInput>
  /**
   * Filter which AccountEmails to update
   */
  where?: Prisma.AccountEmailWhereInput
  /**
   * Limit how many AccountEmails to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * AccountEmail upsert
 */
export type AccountEmailUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmail
   */
  select?: Prisma.AccountEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmail
   */
  omit?: Prisma.AccountEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailInclude<ExtArgs> | null
  /**
   * The filter to search for the AccountEmail to update in case it exists.
   */
  where: Prisma.AccountEmailWhereUniqueInput
  /**
   * In case the AccountEmail found by the `where` argument doesn't exist, create a new AccountEmail with this data.
   */
  create: Prisma.XOR<Prisma.AccountEmailCreateInput, Prisma.AccountEmailUncheckedCreateInput>
  /**
   * In case the AccountEmail was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.AccountEmailUpdateInput, Prisma.AccountEmailUncheckedUpdateInput>
}

/**
 * AccountEmail delete
 */
export type AccountEmailDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmail
   */
  select?: Prisma.AccountEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmail
   */
  omit?: Prisma.AccountEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailInclude<ExtArgs> | null
  /**
   * Filter which AccountEmail to delete.
   */
  where: Prisma.AccountEmailWhereUniqueInput
}

/**
 * AccountEmail deleteMany
 */
export type AccountEmailDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which AccountEmails to delete
   */
  where?: Prisma.AccountEmailWhereInput
  /**
   * Limit how many AccountEmails to delete.
   */
  limit?: number
}

/**
 * AccountEmail.account
 */
export type AccountEmail$accountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Account
   */
  select?: Prisma.AccountSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Account
   */
  omit?: Prisma.AccountOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountInclude<ExtArgs> | null
  where?: Prisma.AccountWhereInput
}

/**
 * AccountEmail.verification
 */
export type AccountEmail$verificationArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmailVerification
   */
  select?: Prisma.AccountEmailVerificationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmailVerification
   */
  omit?: Prisma.AccountEmailVerificationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailVerificationInclude<ExtArgs> | null
  where?: Prisma.AccountEmailVerificationWhereInput
}

/**
 * AccountEmail without action
 */
export type AccountEmailDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the AccountEmail
   */
  select?: Prisma.AccountEmailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the AccountEmail
   */
  omit?: Prisma.AccountEmailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AccountEmailInclude<ExtArgs> | null
}
